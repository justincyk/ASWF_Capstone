plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.pingpong'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
//	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("installFrontend", Exec) {
	inputs.file("frontend/yarn.lock")
	inputs.file("frontend/package.json")
	outputs.dir("frontend/node_modules")

	workingDir "frontend"
	executable "yarn"
	args "install", "--update-checksums"
}


tasks.register("buildFrontend", Exec) {
	dependsOn installFrontend
	inputs.dir("frontend")
	outputs.dir("frontend/build")

	workingDir "frontend"
	executable "yarn"
	args "build"
}

tasks.register("copyFrontend", Copy) {
	from buildFrontend.outputs
	into "$buildDir/resources/main/static"

	doLast {
		println "copied frontend artifacts to $buildDir/resources/main/static"
	}
}

// region configure Spring's bootRun dependency chain
resolveMainClassName {
	dependsOn copyFrontend
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

bootRun {
	dependsOn copyFrontend
}